(set-logic ALL)

(declare-datatype |counter-init| ((|counter-mk-init|
)))

(declare-datatype |counter-input| ((|counter-mk-input|
  (|counter-input-reset| Bool)
  (|counter-input-up| Bool)
)))

(declare-datatype |counter-state| ((|counter-mk-state|
  (|counter-state-count| (_ BitVec 8))
)))

(declare-datatype |counter-values| ((|counter-mk-values|
  (|counter-values-reset| Bool)
  (|counter-values-up| Bool)
  (|counter-values-count| (_ BitVec 8))
  (|counter-values-t1| (_ BitVec 8))
  (|counter-values-t2| (_ BitVec 8))
  (|counter-values-t3| (_ BitVec 8))
)))

(define-fun |counter-first| ((init |counter-init|)) |counter-state| (|counter-mk-state| #b00010000))

(define-fun |counter-next| ((values |counter-values|)) |counter-state| (|counter-mk-state|
  (|counter-values-t3| values) ; count
))

(define-fun |counter-eval| ((input |counter-input|) (state |counter-state|)) |counter-values|
  (let (
    (|net-reset| (|counter-input-reset| input))
    (|net-up| (|counter-input-up| input))
    (|net-count| (|counter-state-count| state))
  ) (let (
    (|net-t1| (bvadd |net-count| #b00000001))
  ) (let (
    (|net-t2| (ite |net-up| |net-t1| |net-count|))
  ) (let (
    (|net-t3| (ite |net-reset| #b00000000 |net-t2|))
  ) (|counter-mk-values|
    |net-reset|
    |net-up|
    |net-count|
    |net-t1|
    |net-t2|
    |net-t3|
))))))

(declare-datatype |counter-trace| (
  (|counter-trace-first|
    (|counter-trace-first-input| |counter-input|)
    (|counter-trace-first-init| |counter-init|)
  )
  (|counter-trace-next|
    (|counter-trace-next-input| |counter-input|)
    (|counter-trace-next-prev| |counter-trace|)
  )
))

(define-fun-rec |counter-trace-eval| ((trace |counter-trace|)) |counter-values|
  (match trace (
    ((|counter-trace-first| input init) (|counter-eval| input (|counter-first| init)))
    ((|counter-trace-next| input prev) (|counter-eval| input (|counter-next| (|counter-trace-eval| prev))))
  ))
)

(define-fun-rec |counter-trace-depth| ((trace |counter-trace|)) Int
  (match trace (
    ((|counter-trace-first| input init) 1)
    ((|counter-trace-next| input prev) (+ 1 (|counter-trace-depth| prev)))
  ))
)

(define-fun-rec |counter-trace-at| ((trace |counter-trace|) (time-from-end-of-trace Int)) |counter-trace|
  (match trace (
    ((|counter-trace-first| input init) trace)
    ((|counter-trace-next| input prev) (ite (= time-from-end-of-trace 0) trace
        (|counter-trace-at| prev (- time-from-end-of-trace 1))))
  ))
)

(declare-const trace |counter-trace|)

(assert (= (|counter-values-count| (|counter-trace-eval| trace)) #b00000111))

; without this Z3 (version 4.8.7) returns a trace that is 10 cycles deep,
; instead of the shortes solution of depth 9
;(assert (= (|counter-trace-depth| trace) 9))

(check-sat)
(get-model)

(get-value (
  (|counter-trace-depth| trace)
))

(get-value (
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 9)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 8)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 7)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 6)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 5)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 4)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 3)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 2)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 1)))
  (|counter-values-count| (|counter-trace-eval| (|counter-trace-at| trace 0)))
))

(get-value (
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 9)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 8)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 7)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 6)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 5)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 4)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 3)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 2)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 1)))
  (|counter-values-reset| (|counter-trace-eval| (|counter-trace-at| trace 0)))
))

(get-value (
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 9)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 8)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 7)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 6)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 5)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 4)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 3)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 2)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 1)))
  (|counter-values-up| (|counter-trace-eval| (|counter-trace-at| trace 0)))
))
