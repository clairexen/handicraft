#!/usr/bin/env splrun
//
// A generator for lasercut boxes (dxf and scad).
//
// This script needs SPL (http://www.clifford.at/spl/)
//

load "file";

if (not declared argv or not declared argv[0] or argv[0] =~ /^-/)
	panic "Usage example: splrun boxgen.spl example";

var config = [
	w: 500,
	h: 500,
	l: 500,
	t: 10,
	door: 0,
];

foreach[] line (file_read(argv[0] ~ ".box") =~ /\n/Sg) {
	if (line =~ /^#/ or line =~ /^\s*$/)
		continue;
	if (line =~ /^\s*(\S+)\s*=\s*(\S+)\s*$/) {
		if (not declared config[$1])
			panic "Unknown config switch '$1'";
		config[$1] = $2;
		continue;
	}
	panic "Config file parser error in line: $line";
}

function line(x1, y1, x2, y2, mode, layer)
{
	if (mode) {
		x1 <=> y1;
		x2 <=> y2;
	}
	return <:>
		:   0
		: LINE
		:  10
		: $x1
		:  11
		: $x2
		:  20
		: $y1
		:  21
		: $y2
		:   8
		: $layer
	</>;
}

function label(x, y, size, rot, text)
{
	if (rot == 0)
		y -= size/2;
	if (rot == 270)
		x -= size/2;
	if (rot == 180)
		y += size/2;
	if (rot == 90)
		x += size/2;
	return <:>
		:   0
		: TEXT
		:  10
		: $x
		:  20
		: $y
		:  40
		: $size
		:  50
		: $rot
		:  72
		: 1
		:  73
		: 0
		:   1
		: $text
		:   8
		: LX
	</>;
}

function edgelabel(x, y, rot, layer, num)
{
	var text;
	if (rot == 0)
		text ~= label(x, y - config.t*2, config.t, 0, "-- " ~ num ~ " --");
	if (rot == 90)
		text ~= label(x - config.t*2, y, config.t, 270, "-- " ~ num ~ " --");
	if (rot == 180)
		text ~= label(x, y + config.t*2, config.t, 0, "-- " ~ num ~ " --");
	if (rot == 270)
		text ~= label(x + config.t*2, y, config.t, 90, "-- " ~ num ~ " --");
	for (var i = 0; i < num; i++) {
		var _x = x, _y = y;
		if (rot == 0 || rot == 180)
			_x = x - 2*(num#/2)*config.t + (i+((num+1)%2)*0.5)*config.t*2;
		if (rot == 90 || rot == 270)
			_y = y - 2*(num#/2)*config.t + (i+((num+1)%2)*0.5)*config.t*2;
		function ln(a,b,c,d) {
			text ~= <:>
				:   0
				: LINE
				:  10
				: ${_x + a*config.t/2}
				:  11
				: ${_x + b*config.t/2}
				:  20
				: ${_y + c*config.t/2}
				:  21
				: ${_y + d*config.t/2}
				:   8
				: $layer
			</>;
		}
		ln(-1,-1,+1,-1);
		ln(+1,-1,+1,+1);
		ln(+1,+1,-1,+1);
		ln(-1,+1,-1,-1);
	}
	return text;
}

function cross(x, y, layer, label_text)
{
	return <:>
		:   0
		: LINE
		:  10
		: ${x-2*config.t}
		:  11
		: ${x+2*config.t}
		:  20
		: ${y-2*config.t}
		:  21
		: ${y+2*config.t}
		:   8
		: $layer
		:   0
		: LINE
		:  10
		: ${x-2*config.t}
		:  11
		: ${x+2*config.t}
		:  20
		: ${y+2*config.t}
		:  21
		: ${y-2*config.t}
		:   8
		: $layer
	</> ~ (defined label_text ? label(x, y+1.5*config.t, 1.5*config.t, 0, label_text) : "");
}

function tline(x1, x2, y, t, mode, inv, short, layer)
{
	if (x2 < x1)
		x1 <=> x2;
	var txt = "";
	var len = x2 - x1;
	var len2 = len - 5*t;
	len2 -= (len2-t) % (2*t);
	var spacing = (len - len2) / 2;
	var a = y, b = y + t;
	if (inv)
		a <=> b;
	if (short) {
		x1 += t;
		x2 -= t;
		spacing -= t;
	}
	txt ~= line(x1, a, x1+spacing, a, mode, layer);
	txt ~= line(x1+spacing, a, x1+spacing, b, mode, layer);
	for (var x = x1+spacing; x < x2-spacing-t; x += t*2) {
		txt ~= line(x, b, x+t, b, mode, layer);
		txt ~= line(x+t, b, x+t, a, mode, layer);
		txt ~= line(x+t, a, x+t*2, a, mode, layer);
		txt ~= line(x+t*2, a, x+t*2, b, mode, layer);
	}
	txt ~= line(x2-spacing-t, b, x2-spacing, b, mode, layer);
	txt ~= line(x2-spacing, b, x2-spacing, a, mode, layer);
	txt ~= line(x2-spacing, a, x2, a, mode, layer);
	return txt;
}

function fline(x1, x2, y, t, mode, inv, short, layer)
{
	if (x2 < x1)
		x1 <=> x2;
	var a = y, b = y + t;
	if (inv)
		a <=> b;
	if (short) {
		x1 += t;
		x2 -= t;
	}
	return line(x1, a, x2, a, mode, layer);
}

var p1y = config.h + config.t*2;
var p1x = config.w + config.t*2;
var p2x = 2*p1x;
var p3x = p2x + config.h + config.t*2;

file_write(argv[0] ~ ".dxf", <:>
	:   0
	: SECTION
	:   2
	: TABLES
	:   0
 	: TABLE
	:   2
	: LAYER
	<?spl for (var i=1; i<=6; i++) { ?>
	:   0
	: LAYER
	:   2
	: S$i
	:   6
	: CONTINUOUS
	:  62
	: 0
	:   0
	: LAYER
	:   2
	: C$i
	:   6
	: CONTINUOUS
	:  62
	: 2
	:   0
	: LAYER
	:   2
	: M$i
	:   6
	: CONTINUOUS
	:  62
	: 3
	<?spl } ?>
	:   0
	: LAYER
	:   2
	: LX
	:   6
	: CONTINUOUS
	:  62
	: 4
	:   0
	: ENDTAB
	:   0
	: ENDSEC

	:   0
	: SECTION
	:   2
	: ENTITIES

	<?spl
		for (var i=0; i<2; i++) {
			var p23x = i ? p3x : p2x;
			var xline = config.door ? i ? fline : tline : tline;
			var yline = config.door ? fline : tline;
	?>

		${ tline(p1x*i, p1x*i+config.w+config.t, 0, config.t, 0, 0, 0, i ? "S6" : "S1") }
		${ yline(p1x*i, p1x*i+config.w+config.t, config.h, config.t, 0, 1, 0, i ? "S6" : "S1") }
		${ tline(0, config.h+config.t, p1x*i, config.t, 1, 0, 0, i ? "S6" : "S1") }
		${ tline(0, config.h+config.t, p1x*i+config.w, config.t, 1, 1, 0, i ? "S6" : "S1") }

		${ xline(p1x*i, p1x*i+config.w+config.t, p1y, config.t, 0, 1, 1, i ? "S5" : "S2") }
		${ xline(p1x*i, p1x*i+config.w+config.t, p1y+config.l, config.t, 0, 0, 1, i ? "S5" : "S2") }
		${ xline(p1y, p1y+config.l+config.t, p1x*i, config.t, 1, 1, 1, i ? "S5" : "S2") }
		${ xline(p1y, p1y+config.l+config.t, p1x*i+config.w, config.t, 1, 0, 1, i ? "S5" : "S2") }

		${ tline(p23x, p23x+config.h+config.t, p1y, config.t, 0, 1, 0, i ? "S4" : "S3") }
		${ tline(p23x, p23x+config.h+config.t, p1y+config.l, config.t, 0, 0, 0, i ? "S4" : "S3") }
		${ tline(p1y, p1y+config.l+config.t, p23x, config.t, 1, 0, 1, i ? "S4" : "S3") }
		${ yline(p1y, p1y+config.l+config.t, p23x+config.h, config.t, 1, 1, 1, i ? "S4" : "S3") }

		${ edgelabel(p1x*i + (config.w+config.t)/2, p1y + config.l - config.t, 0, i ? "M5" : "M2", 1) }
		${ edgelabel(p23x + (config.h+config.t)/2, !i ? p1y + 2*config.t : p1y + config.l - config.t, !i ? 180 : 0, i ? "M4" : "M3", 1) }

		${ edgelabel(p1x*i + (config.w+config.t)/2, 2*config.t, 180, i ? "M6" : "M1", 2) }
		${ edgelabel(p23x + 2*config.t, p1y + (config.l+config.t)/2, 270, i ? "M4" : "M3", 2) }

		${ edgelabel(i ? p1x + config.w - config.t : 2*config.t, (config.h+config.t)/2, i ? 90 : 270, i ? "M6" : "M1", 3) }
		${ edgelabel(i ? p1x + config.w - config.t : 2*config.t, p1y + (config.l+config.t)/2, i ? 90 : 270, i ? "M5" : "M2", 3) }

		${ edgelabel(i ? p1x + 2*config.t : config.w - config.t, (config.h+config.t)/2, i ? 270 : 90, i ? "M6" : "M1", 4) }
		${ edgelabel(i ? p1x + 2*config.t : config.w - config.t, p1y + (config.l+config.t)/2, i ? 270 : 90, i ? "M5" : "M2", 4) }

		${ edgelabel(p1x*i + (config.w+config.t)/2, config.h-config.t, 0, i ? "M6" : "M1", 5) }
		${ edgelabel(p23x + config.h - config.t, p1y + (config.l+config.t)/2, 90, i ? "M4" : "M3", 5) }

		${ edgelabel(p1x*i + (config.w+config.t)/2, p1y + 2*config.t, 180, i ? "M5" : "M2", 6) }
		${ edgelabel(p23x + (config.h+config.t)/2, i ? p1y + 2*config.t : p1y + config.l - config.t, i ? 180 : 0, i ? "M4" : "M3", 6) }

		${ cross(p1x*i + (config.w+config.t)/2, (config.h+config.t)/2, i ? "C6" : "C1", i ? "6" : "1") }
		${ cross(p1x*i + (config.w+config.t)/2, p1y + (config.l+config.t)/2, i ? "C5" : "C2", i ? "5" : "2") }
		${ cross(p23x + (config.h+config.t)/2, p1y + (config.l+config.t)/2, i ? "C4" : "C3", i ? "4" : "3") }

	<?spl } ?>

        :   0
	: ENDSEC
	:   0
	: EOF
</>);

file_write(argv[0] ~ ".scad", <:>
	:
	: // Generated using Clifford Wolf's boxgen script
	: // http://svn.clifford.at/handicraft/2009/boxgen
	:
	: dxf_file = "${argv[0] ~ ".dxf"}";
	:
	: h = $config.h;
	: w = $config.w;
	: l = $config.l;
	: t = $config.t;
	:
	: eyes = true;
	: space = t*2;
<spl:if code="config.door">
	: dspace = t*5;
</spl:if>
	:
	<?spl
		var spos = [
			1: [ [0,+1,0], [3,2] ],
			2: [ [0,0,-1], [0,2] ],
			3: [ [+1,0,0], [2,3] ],
			4: [ [-1,0,0], [0,3] ],
			5: [ [0,0,+1], [0,0] ],
			6: [ [0,-1,0], [1,0] ],
		];
		var eyepos = [
			1: [ [0,0,0], [0,1,0], [0,0,0] ],
			2: [ [1,0,0], [0,0,0], [0,0,1] ],
			3: [ [1,0,0], [0,1,0], [0,0,1] ],
			4: [ [1,0,1], [0,0,0], [1,0,1] ],
			5: [ [1,0,1], [0,1,0], [1,0,1] ],
			6: [ [1,1,1], [0,0,0], [1,1,1] ],
		];
		var dspace_add = config.door ? " + dspace" : "";
		for (var i = 1; i <= 6; i++) {
	?>
	: module s$i() {
	:	module s()
	:		dxf_linear_extrude(file = dxf_file, layer = "S$i", center = true, convexity = 3,
	:			height = t, origin = dxf_cross(file = dxf_file, layer = "C$i"));
	:	if (eyes) difference() {
	:		s();
	:		dxf_linear_extrude(file = dxf_file, layer = "M$i", center = false, convexity = 3,
	:			height = t, origin = dxf_cross(file = dxf_file, layer = "C$i"));
		<?spl
			for (var x = 0; x < 3; x++) 
			for (var y = 0; y < 3; y++) 
			if (eyepos[i][x][y]) {
		?>
	:		translate([ ${(x-1)*2}*t, ${(y-1)*2}*t, t/2 ]) sphere(t/2);
		<?spl } ?>
	:	}
	:	if (!eyes) s();
	: }
	<?spl } ?>
	:
	: module box() {
	<?spl for (var i = 1; i <= 6; i++) { ?>
	:	translate([ ${spos[i][0][0]}*(w/2+space), ${spos[i][0][1]}*(l/2+space), ${spos[i][0][2]}*(h/2+space)${ i == 5 ? dspace_add : ""} ])
	:		rotate([ ${spos[i][1][0]*90}, ${spos[i][1][1]*90}, 0 ]) s$i();
	<?spl } ?>
	: }
	:
	: box();
</>);

